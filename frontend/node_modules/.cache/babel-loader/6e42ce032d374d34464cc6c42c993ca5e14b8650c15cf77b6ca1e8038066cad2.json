{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\evdr1\\\\Desktop\\\\InstaClone\\\\frontend\\\\src\\\\pages\\\\Upload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { supabase } from '../supabaseClient';\nimport '../styles/Upload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Upload() {\n  _s();\n  const [caption, setCaption] = useState('');\n  const [image, setImage] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [user, setUser] = useState(null);\n  React.useEffect(() => {\n    // Get the current logged-in user\n    const getSession = async () => {\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n    };\n    getSession();\n    const {\n      data: listener\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n    });\n    return () => {\n      listener.subscription.unsubscribe();\n    };\n  }, []);\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setImage(file);\n      setPreview(URL.createObjectURL(file));\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(null);\n    setSuccess(false);\n    if (!user) {\n      setError('You must be signed in to upload a post.');\n      return;\n    }\n    if (!image) {\n      setError('Please select an image to upload.');\n      return;\n    }\n    setLoading(true);\n    try {\n      // 1. Upload image to Supabase Storage\n      const fileExt = image.name.split('.').pop();\n      const fileName = `${user.id}_${Date.now()}.${fileExt}`;\n      const filePath = `${fileName}`;\n      let {\n        error: uploadError\n      } = await supabase.storage.from('post-images').upload(filePath, image);\n      if (uploadError) throw uploadError;\n      // 2. Get public URL\n      const {\n        data: {\n          publicUrl\n        }\n      } = supabase.storage.from('post-images').getPublicUrl(filePath);\n      // 3. Insert post into posts table\n      const {\n        error: insertError\n      } = await supabase.from('posts').insert([{\n        user_id: user.id,\n        image_url: publicUrl,\n        caption: caption\n      }]);\n      if (insertError) throw insertError;\n      setSuccess(true);\n      setCaption('');\n      setImage(null);\n      setPreview(null);\n      console.log(user.id);\n    } catch (err) {\n      setError(err.message || 'Failed to upload post.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"upload-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-upload\",\n        children: preview ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: preview,\n          alt: \"Preview\",\n          className: \"image-preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-placeholder\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImageChange,\n            id: \"image-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"image-input\",\n            children: \"Select Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: caption,\n        onChange: e => setCaption(e.target.value),\n        placeholder: \"Write a caption...\",\n        className: \"caption-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        disabled: loading,\n        children: loading ? 'Uploading...' : 'Share'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"auth-error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"auth-success\",\n        children: \"Post uploaded successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Upload, \"MeHPbtVc2AgROE/Gu6oXLg7+hPg=\");\n_c = Upload;\nexport default Upload;\nvar _c;\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"names":["React","useState","supabase","jsxDEV","_jsxDEV","Upload","_s","caption","setCaption","image","setImage","preview","setPreview","loading","setLoading","error","setError","success","setSuccess","user","setUser","useEffect","getSession","data","session","auth","listener","onAuthStateChange","_event","subscription","unsubscribe","handleImageChange","e","file","target","files","URL","createObjectURL","handleSubmit","preventDefault","fileExt","name","split","pop","fileName","id","Date","now","filePath","uploadError","storage","from","upload","publicUrl","getPublicUrl","insertError","insert","user_id","image_url","console","log","err","message","className","children","_jsxFileName","lineNumber","columnNumber","onSubmit","src","alt","type","accept","onChange","htmlFor","value","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/evdr1/Desktop/InstaClone/frontend/src/pages/Upload.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { supabase } from '../supabaseClient';\r\nimport '../styles/Upload.css';\r\n\r\nfunction Upload() {\r\n  const [caption, setCaption] = useState('');\r\n  const [image, setImage] = useState(null);\r\n  const [preview, setPreview] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n\r\n  React.useEffect(() => {\r\n    // Get the current logged-in user\r\n    const getSession = async () => {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      setUser(session?.user || null);\r\n    };\r\n    getSession();\r\n    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {\r\n      setUser(session?.user || null);\r\n    });\r\n    return () => {\r\n      listener.subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setImage(file);\r\n      setPreview(URL.createObjectURL(file));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setSuccess(false);\r\n    if (!user) {\r\n      setError('You must be signed in to upload a post.');\r\n      return;\r\n    }\r\n    if (!image) {\r\n      setError('Please select an image to upload.');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      // 1. Upload image to Supabase Storage\r\n      const fileExt = image.name.split('.').pop();\r\n      const fileName = `${user.id}_${Date.now()}.${fileExt}`;\r\n      const filePath = `${fileName}`;\r\n      let { error: uploadError } = await supabase.storage\r\n        .from('post-images')\r\n        .upload(filePath, image);\r\n      if (uploadError) throw uploadError;\r\n      // 2. Get public URL\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from('post-images')\r\n        .getPublicUrl(filePath);\r\n      // 3. Insert post into posts table\r\n      const { error: insertError } = await supabase\r\n        .from('posts')\r\n        .insert([\r\n          {\r\n            user_id: user.id,\r\n            image_url: publicUrl,\r\n            caption: caption,\r\n          },\r\n        ]);\r\n      if (insertError) throw insertError;\r\n      setSuccess(true);\r\n      setCaption('');\r\n      setImage(null);\r\n      setPreview(null);\r\n      console.log(user.id);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to upload post.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h2>Create New Post</h2>\r\n      <form onSubmit={handleSubmit} className=\"upload-form\">\r\n        <div className=\"image-upload\">\r\n          {preview ? (\r\n            <img src={preview} alt=\"Preview\" className=\"image-preview\" />\r\n          ) : (\r\n            <div className=\"upload-placeholder\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageChange}\r\n                id=\"image-input\"\r\n              />\r\n              <label htmlFor=\"image-input\">Select Image</label>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <textarea\r\n          value={caption}\r\n          onChange={(e) => setCaption(e.target.value)}\r\n          placeholder=\"Write a caption...\"\r\n          className=\"caption-input\"\r\n        />\r\n        <button type=\"submit\" className=\"submit-button\" disabled={loading}>\r\n          {loading ? 'Uploading...' : 'Share'}\r\n        </button>\r\n        {error && <p className=\"auth-error\">{error}</p>}\r\n        {success && <p className=\"auth-success\">Post uploaded successfully!</p>}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Upload; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}