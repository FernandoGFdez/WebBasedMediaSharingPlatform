{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\evdr1\\\\Desktop\\\\InstaClone\\\\frontend\\\\src\\\\pages\\\\Upload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/Upload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Upload() {\n  _s();\n  const [caption, setCaption] = useState('');\n  const [image, setImage] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setImage(file);\n      setPreview(URL.createObjectURL(file));\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Here we'll add the logic to send to backend later\n    console.log('Submitting:', {\n      image,\n      caption\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"upload-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-upload\",\n        children: preview ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: preview,\n          alt: \"Preview\",\n          className: \"image-preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-placeholder\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImageChange,\n            id: \"image-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"image-input\",\n            children: \"Select Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: caption,\n        onChange: e => setCaption(e.target.value),\n        placeholder: \"Write a caption...\",\n        className: \"caption-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(Upload, \"yMoKoCFc3cbjB6/kBaAQSW7Ymho=\");\n_c = Upload;\nexport default Upload;\nvar _c;\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Upload","_s","caption","setCaption","image","setImage","preview","setPreview","handleImageChange","e","file","target","files","URL","createObjectURL","handleSubmit","preventDefault","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","src","alt","type","accept","onChange","id","htmlFor","value","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/evdr1/Desktop/InstaClone/frontend/src/pages/Upload.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Upload.css';\r\n\r\nfunction Upload() {\r\n  const [caption, setCaption] = useState('');\r\n  const [image, setImage] = useState(null);\r\n  const [preview, setPreview] = useState(null);\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setImage(file);\r\n      setPreview(URL.createObjectURL(file));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Here we'll add the logic to send to backend later\r\n    console.log('Submitting:', { image, caption });\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h2>Create New Post</h2>\r\n      <form onSubmit={handleSubmit} className=\"upload-form\">\r\n        <div className=\"image-upload\">\r\n          {preview ? (\r\n            <img src={preview} alt=\"Preview\" className=\"image-preview\" />\r\n          ) : (\r\n            <div className=\"upload-placeholder\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageChange}\r\n                id=\"image-input\"\r\n              />\r\n              <label htmlFor=\"image-input\">Select Image</label>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <textarea\r\n          value={caption}\r\n          onChange={(e) => setCaption(e.target.value)}\r\n          placeholder=\"Write a caption...\"\r\n          className=\"caption-input\"\r\n        />\r\n        <button type=\"submit\" className=\"submit-button\">\r\n          Share\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Upload; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}